version: 2
image_name: starter
apis:
- agents
- datasetio
- eval
- files
- inference
- safety
- scoring
- telemetry
- tool_runtime
- vector_io
providers:
  inference:
  - config:
      api_key: ${env.GEMINI_API_KEY:=}
    provider_id: gemini
    provider_type: remote::gemini
  - config: {}
    provider_id: sentence-transformers
    provider_type: inline::sentence-transformers
  vector_io:
  - config:
      kvstore:
        type: sqlite
        namespace: null
        db_path: /app/llama_stack_vector_db/faiss_store.db
    provider_id: ocp-assisted-installer-4.19
    provider_type: inline::faiss
  files:
  - config:
      storage_dir: /tmp/llama-stack-files
      metadata_store:
        type: sqlite
        db_path: ${env.SQLITE_STORE_DIR:=/tmp/.llama/distributions/starter}/files_metadata.db
    provider_id: localfs
    provider_type: inline::localfs
  safety: []
  agents:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      persistence_store:
        type: postgres
        host: ${env.POSTGRES_HOST:=localhost}
        port: ${env.POSTGRES_PORT:=5432}
        db: ${env.POSTGRES_DB:=assisted-chat}
        user: ${env.POSTGRES_USER:=assisted-chat}
        password: ${env.POSTGRES_PASSWORD:=assisted-chat}
      responses_store:
        type: postgres
        host: ${env.POSTGRES_HOST:=localhost}
        port: ${env.POSTGRES_PORT:=5432}
        db: ${env.POSTGRES_DB:=assisted-chat}
        user: ${env.POSTGRES_USER:=assisted-chat}
        password: ${env.POSTGRES_PASSWORD:=assisted-chat}
  telemetry:
  - provider_id: meta-reference
    provider_type: inline::meta-reference
    config:
      service_name: "${env.OTEL_SERVICE_NAME:=\u200B}"
      sinks: ${env.TELEMETRY_SINKS:=console,sqlite}
      sqlite_db_path: ${env.SQLITE_STORE_DIR:=/tmp/.llama/distributions/starter}/trace_store.db
  eval: []
  datasetio: []
  scoring:
  - provider_id: basic
    provider_type: inline::basic
    config: {}
  - provider_id: llm-as-judge
    provider_type: inline::llm-as-judge
    config: {}
  tool_runtime:
  - provider_id: model-context-protocol
    provider_type: remote::model-context-protocol
    config: {}
  - provider_id: rag-runtime
    provider_type: inline::rag-runtime
    config: {}
metadata_store:
  type: sqlite
  db_path: ${env.SQLITE_STORE_DIR:=/tmp/.llama/distributions/starter}/registry.db
inference_store:
  type: postgres
  host: ${env.POSTGRES_HOST:=localhost}
  port: ${env.POSTGRES_PORT:=5432}
  db: ${env.POSTGRES_DB:=assisted-chat}
  user: ${env.POSTGRES_USER:=assisted-chat}
  password: ${env.POSTGRES_PASSWORD:=assisted-chat}
models:
- metadata: {}
  model_id: gemini/gemini-2.0-flash
  provider_id: gemini
  provider_model_id: gemini/gemini-2.0-flash
  model_type: llm
- metadata: {}
  model_id: gemini/gemini-2.5-pro
  provider_id: gemini
  provider_model_id: gemini/gemini-2.5-pro
  model_type: llm
- metadata: {}
  model_id: gemini/gemini-2.5-flash
  provider_id: gemini
  provider_model_id: gemini/gemini-2.5-flash
  model_type: llm
- metadata:
    embedding_dimension: 768
  model_id: sentence-transformers/all-mpnet-base-v2
  provider_id: sentence-transformers
  provider_model_id: /app-root/all-mpnet-base-v2
  model_type: embedding
shields: []
vector_dbs:
  - vector_db_id: ocp-assisted-installer-4.19
    embedding_model: sentence-transformers/all-mpnet-base-v2
    embedding_dimension: 768
    provider_id: ocp-assisted-installer-4.19
    provider_vector_db_id: <vector_db_id>
datasets: []
scoring_fns: []
benchmarks: []
tool_groups:
- toolgroup_id: mcp::assisted
  provider_id: model-context-protocol
  mcp_endpoint:
    uri: "http://assisted-service-mcp:8000/mcp"
- toolgroup_id: builtin::rag
  provider_id: rag-runtime
server:
  port: 8321
